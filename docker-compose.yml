services:
  server:
    restart: unless-stopped
    build:
      context: .
      dockerfile: dev.Dockerfile
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - AUTH0_CALLBACK_URL=${AUTH0_CALLBACK_URL}
      - ORS_API_KEY=${ORS_API_KEY}
      - MAPS_API_KEY=${MAPS_API_KEY}

    ports:
      - "3000:3000"
    volumes: # Remove for deployment
      - ./:/server
    # deploy:
    #   resources:
    #     reservations:
    #       memory: 50M
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8080/"]
    depends_on:
      db:
        condition: service_healthy
        restart: true

  db:
    container_name: db_container
    image: postgres:16.4
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      - "5432:5432"
    volumes:
      - db_vol:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

volumes:
  db_vol:
